{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "60a48e45",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "94f8d37d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bd3186ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8f99cea0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3ec0f75e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "81edd9d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(r\"D:\\Internship\\Task 1\\train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f88a33a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>1456</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7917</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>175000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>1457</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>85.0</td>\n",
       "      <td>13175</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>1458</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9042</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GdPrv</td>\n",
       "      <td>Shed</td>\n",
       "      <td>2500</td>\n",
       "      <td>5</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>266500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>1459</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9717</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>142125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>1460</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>75.0</td>\n",
       "      <td>9937</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>147500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1460 rows × 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0        1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1        2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2        3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3        4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4        5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "...    ...         ...      ...          ...      ...    ...   ...      ...   \n",
       "1455  1456          60       RL         62.0     7917   Pave   NaN      Reg   \n",
       "1456  1457          20       RL         85.0    13175   Pave   NaN      Reg   \n",
       "1457  1458          70       RL         66.0     9042   Pave   NaN      Reg   \n",
       "1458  1459          20       RL         68.0     9717   Pave   NaN      Reg   \n",
       "1459  1460          20       RL         75.0     9937   Pave   NaN      Reg   \n",
       "\n",
       "     LandContour Utilities  ... PoolArea PoolQC  Fence MiscFeature MiscVal  \\\n",
       "0            Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n",
       "1            Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n",
       "2            Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n",
       "3            Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n",
       "4            Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n",
       "...          ...       ...  ...      ...    ...    ...         ...     ...   \n",
       "1455         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n",
       "1456         Lvl    AllPub  ...        0    NaN  MnPrv         NaN       0   \n",
       "1457         Lvl    AllPub  ...        0    NaN  GdPrv        Shed    2500   \n",
       "1458         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n",
       "1459         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n",
       "\n",
       "     MoSold YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0         2   2008        WD         Normal     208500  \n",
       "1         5   2007        WD         Normal     181500  \n",
       "2         9   2008        WD         Normal     223500  \n",
       "3         2   2006        WD        Abnorml     140000  \n",
       "4        12   2008        WD         Normal     250000  \n",
       "...     ...    ...       ...            ...        ...  \n",
       "1455      8   2007        WD         Normal     175000  \n",
       "1456      2   2010        WD         Normal     210000  \n",
       "1457      5   2010        WD         Normal     266500  \n",
       "1458      4   2010        WD         Normal     142125  \n",
       "1459      6   2008        WD         Normal     147500  \n",
       "\n",
       "[1460 rows x 81 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "62cf5fc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = [\"GrLivArea\", \"BedroomAbvGr\", \"FullBath\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cbd5afb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data[features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "294b3736",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = data[\"SalePrice\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c174ae1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train , X_test , y_train , y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4f957c98",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "397a64c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train , y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "864946c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "05d2c3cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "mse = mean_squared_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e251fa4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "r2 = r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "db4d0a14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean squared Error: 2806426667.247853\n",
      "R-squared: 0.6341189942328371\n"
     ]
    }
   ],
   "source": [
    "print(f'Mean squared Error: {mse}')\n",
    "print(f'R-squared: {r2}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "395a2483",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test, y_pred)\n",
    "plt.xlabel(\"Actual Price\")\n",
    "plt.ylabel(\"Predicted Prics\")\n",
    "plt.title(\"Actual Prices vs Predicted Prices \")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6a53c52c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted price: 240377.51479736285\n"
     ]
    }
   ],
   "source": [
    "new_data = pd.DataFrame({\n",
    "    'GrLivArea': [2000],\n",
    "    'BedroomAbvGr' : [3],\n",
    "    'FullBath' : [2]})\n",
    "predicted_price = model.predict(new_data)\n",
    "print(f'Predicted price: {predicted_price[0]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dcb77449",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjIAAAHHCAYAAACle7JuAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjMsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvZiW1igAAAAlwSFlzAAAPYQAAD2EBqD+naQAARphJREFUeJzt3Qm4jHX/x/GvfV+yZCmUEJJChZIikpYnpV1FedIiQutp06KonpCypEI9KlGRFjxISlFRoc2epbKkrGW//9fnd133/GfGOc6ccc6Zuee8X9c1nJm5557fPXPP3N/5/r6/353P8zzPAAAAAih/ohsAAAAQLwIZAAAQWAQyAAAgsAhkAABAYBHIAACAwCKQAQAAgUUgAwAAAotABgAABBaBDAAACCwCGeSIRx55xPLly5crz3X22We7i++TTz5xz/3222/nyvN36dLFjjnmGEtmO3bssH//+99WuXJl99r06tXLUlFu7nfJzP8M6P9k3U/Ta2NOSbZtR/YikEGmxowZ475w/EvRokWtatWq1q5dOxsyZIht3749W57nt99+cwei7777zpJNMrctFk8++aR7H2+99Vb773//a9ddd12mj9m/f797n/WeT5kyJe7nfuONN2zw4MGWlyiwDv/MlCtXzk499VQbNWqUHThwwIK270yaNCmpvn/q1Kljt99+u23YsCFh7ULyKJjoBiA4HnvsMTv22GNt7969tn79evdLSr/sBw4caJMnT7aGDRuGln3wwQftvvvuy3Kw8Oijj7pfTieffHLMj/vf//5nOe1QbXvppZeS/uD08ccfW7Nmzaxv375Zeszvv//utvn111+39u3bxx3IfP/99ymbBcrI0Ucfbf3793d/b9q0yV577TXr2rWrLV261AYMGJDr7Yl3P1Ugc9lll1mHDh0sGb5/du3aZXPmzLHhw4fbRx995Pat4sWLH/KxQfiMIn4EMoiZDmSnnHJK6HpaWpo72F144YX2r3/9y3766ScrVqyYu69gwYLukpP+/vtv9wVWuHBhS6RChQpZstu4caPVr18/S48ZO3asNW7c2Dp37mz333+/7dy500qUKJFjbUw1ZcqUsWuvvTZ0/eabb7bjjz/eXnjhBXv88cfT3W90sN2zZ4/LOuTF/TTW7x91k5YvX979iHrvvffs6quvTvcx/j4b9G3HodG1hMPSunVre+ih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IAMAAAKLQAYAAARWyk+Ip0mONKukJjLK7inwAQBAztDsMJqIUhMxHuocWikfyCiIyWiWUgAAkNx0yphDnXwz5QMZf5p2vRCaWhwAACQ/ncdKiYjMTreS8oGM352kIIZABgCAYMmsLCShxb46yZ0aGH3p3r27u19n1NXf5cuXdyea0wm4dPI/AACAhAcyX3/9tf3++++hi86kLDqLqPTu3dvef/99mzBhgs2ePdvVu+jU6gAAAJJUJ43s1auXffDBB+606uobq1ixor3xxht22WWXuft//vlnq1evns2dO9eaNWsW0zq1njJlytjWrVvpWgIAICBiPX4nTY3Mnj17bOzYsdanTx/XvbRgwQLbu3evtWnTJrRM3bp1rXr16ocMZHbv3u0u4S8EACB++/fvd9/HQHYqVKiQFShQ4LDXkzSBzKRJk2zLli3WpUsXd339+vVWuHBhK1u2bMRylSpVcvdlpH///vboo4/meHsBINUpYa/vW303AzlBx/jKlSsf1jxvSRPIvPLKK9a+fXs38c3hSEtLc1md6OFbAICs8YOYI4880ooXL86kosjWIPnvv/+2jRs3uutVqlQJdiCzevVqmzFjhr377ruh2xShqbtJH6LwrIxGLem+jBQpUsRdAACH153kBzEaOQpkt2LFirn/FcxoP4u3mykpzrU0evRotxEXXHBB6LYmTZq4/rOZM2eGbluyZImtWbPGmjdvnqCWAkDe4NfEKBMD5BR//zqcGqyCyXAuJAUynTt3toIF/785qlTu2rWr6yYqV66cq1ju0aOHC2JiHbEEADg8dCch2fevhAcy6lJSluXGG2886L5Bgwa5E0VpIjyNRGrXrp0NGzYsIe0EAADJJ+FdS+eee64r+qlTp85B9xUtWtSGDh1qf/75p+3cudPV0ByqPgYAgCBkITRSNydmyx88eLDlNQnPyAAAgmXQ9KW5+ny92x78QzcWmnOsRYsWdt5559mHH36Y5aBAk7Tqkts0Dcmrr77q/latqOZPu/766+3++++PKMFIb7b8EiVKWF6T8IwMAAA5Na2Hais//fRTd4qbIFHwpVP3aKb7O++80x555BF75pln0l12z5497n/Nhp8Xi7MJZAAAKWfHjh321ltv2a233upGxI4ZM+agZXQuv1NPPdWVMVSoUMEuueQSd/vZZ5/tpgXR+f78kxmLgomTTz45Yh3qylH2Jjwr0rZtW7c+DVo566yz7Jtvvsly+zWNiEopatSo4bZBs9xPnjw5lLHp0KGDPfHEE27uteOPPz7driUNn7/55pvdRLLaxgYNGrjTAPnmzJljZ555phsGrfnWevbs6co4goZABgCQcsaPH+9Oa6OD/LXXXmujRo1y9Zg+dTUpcDn//PPt22+/dVN9nHbaae4+1WMeffTR9thjj4VOahyr7du3u1G4ChLmzZtntWvXds+h2w+Hgg0/8yJqr6YkmT59ekRwEj4iWJPMfv755+70Pz/++KMNGDAgNFfLihUrXNZHg2kWLVrkgj61+fbbb7egoUYGudY3Hm8/NwDE062kAEZ0wNaJB2fPnu2yLaJsxlVXXRVxSpuTTjrJ/a8pP3TAL1WqVJYHmLRu3Tri+siRI92krnruCy+8MMvboeBLQcu0adNcN5lPtTAvv/yyO5VPRiOCv/rqK/vpp59Cg2lq1qwZcTqfTp06hWqAFHANGTLEZZCGDx/uMjhBQUYGAJBSlKnQQfzqq69211Uge+WVV7rgxvfdd9/ZOeeck+3Prdnnb7rpJhcYqGtJc6Cpm0vTjGSFsiwlS5Z0AYUyK2q/urZ8J554YoZBjL99yiqlNyJYFi5c6Lrb9Bz+RVOcKJOzatUqCxIyMgCAlKKAZd++fRHn7lNmQ3UnL7zwggsw/Onxs0LzmoV3T6U3I626lTZv3mzPPfecq2/Rc2oi1/BuoVi0atXKZUYUrGg7okcrZTY6qVgm26fgSvUzqouJplFSQUIgAwBIGQpgXnvtNXv22WfdPGXhVCD75ptv2i233GINGzZ0XTY33HBDuutRAKHzTYXTqCCdSFPBjF8ArMxHONWkaOJW1cXI2rVr7Y8//sjydihQqVWrlsWrYcOGtm7dOlu6dGm6WZnGjRu7upnDeY5kQdcSACBlqEvmr7/+cqe40Sid8IsKW/3upb59+7qgRv+rjmTx4sX21FNPhdajEUAatv3rr7+GAhHV12zatMmefvppVyyrCVunTJkS8fzqUvrvf//r1vnll1+6OpR4sj+H66yzzrKWLVu6bVZBsLqL1NapU6e6+++991774osvXHGvgjEN837vvfcCWexLIAMASBkKVDRUWd1H0XRQnz9/vhulo6BkwoQJbkizhlSrSFd1NT6NWPrll1/suOOOc5kYqVevnsu2KIBRYbCWv+uuuw56fgVSynhcd911rutGJ0VOhHfeeccNL1etUP369e2ee+4JZZmUsVEBsjI2GoLdqFEje/jhhyO644Iinxfd4Zditm3b5nZoVayr6AqHh1FLQN6wa9cu9yv+2GOPDdQIFqTOfhbr8ZuMDAAACCwCGQAAEFgEMgAAILAIZAAAQGARyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWgQwAAAgsAhkAAOLUpUsXdzJKn0590KtXr1xvxyeffOJOZLlly5ZsXa9O06D1Rp8cM5lw9msAQNbM6p+7z9cqLcvBxauvvur+LlSokFWvXt2uv/56u//++61gwZw97L377rvuOWMNPlq1auXOzVS2bFnLacccc4ytXr3a/V28eHE7/vjjLS0tzS6//PIMH1OtWjX7/fffrUKFCpasyMgAAFLOeeed5w7AOqvznXfeaY888og988wz6S67Z8+ebHvecuXKWalSpSxZPfbYY+51+fbbb90JJa+88kp3FuyMXpcCBQpY5cqVczwAPBwEMgCAlFOkSBF3AK5Ro4bdeuut7ozYOtN1eHfQE0884c72rMyErF271q644gqXHVFAcvHFF7uuFZ/OHN2nTx93f/ny5d3ZpKPPuxzdtbR792679957XWZDbapVq5Y7Q7bWq2yMHHHEEa77Ru2SAwcOWP/+/d2JFIsVK+bOtP32229HPM9HH31kderUcfdrPeHtPBQFWXpd9FidxVuPf//990MZm8cff9xlr3SSxm7duqXbtfTDDz/YhRde6JbR+nT27BUrVoTuf/nll92ZwnUSyLp167ozhuek5A2xAADIJjpgb968OXR95syZ7kA8ffp0d33v3r3Wrl07a968uX322WcuA9GvXz+X2Vm0aJEVLlzYnn32WRszZoyNGjXKHah1feLEida6desMn1dBwdy5c23IkCEuINGZnv/44w8X2LzzzjvWsWNHW7JkiWuL2igKYsaOHWsjRoyw2rVr26effmrXXnutVaxY0c466ywXcF166aXWvXt3F2zMnz/fZZ2yStuobrDwjNR//vMfe/jhh61v377pPubXX3+1li1buoDt448/du3+/PPPbd++fe7+119/3T3+hRdesEaNGrnMz0033WQlSpSwzp07Z7mNMW1HjqwVAIAkoIyJgpZp06ZZjx49QrfrwKrMgQIUUeCgTIhuUwZCRo8e7bIvqmU599xzbfDgwa6mREGEKNDQejOydOlSGz9+vAuWlBGSmjVrhu5X1keOPPLIUI2MMjhPPvmkzZgxwwVV/mPmzJljL774ogtkhg8fbscdd5wLpEQZpcWLF9tTTz1lsVLwosdv3bo1IhDT3+FBUXSmR1mcMmXK2Lhx40K1QMru+BQAab3+a6Ss0o8//ujaTiADAECMPvjgAytZsqTLtChAueaaa1ydjO/EE08MBTGycOFCW758+UH1Lbt27XLdJjrgq7akadOmERmNU0455aDuJZ+6Y1RjouAjVmrD33//bW3btj0o8FCGQ3766aeIdogf9GRG3VwPPvig2y69PgMGDLALLrggdL+251C0TepKSq+geefOne616tq1q8vC+JStUfCTUwhkAAApR3UjylwoWFEdTHSxqjIy4Xbs2GFNmjRxXSPR1KUTD7+rKCvUDvnwww/tqKOOirhPNTaH6+6773a1OApiKlWqFMo+ZfS6ZGWb/La/9NJLBwVaCuhyCoEMACDl6ICswtpYNW7c2N566y3XzaO6j/RUqVLFvvzyS1cj4mcaFixY4B6bHmV9lA2aPXt2qGspnJ8RUhGxr379+i5gWbNmTYaZHNXn+IXLvnnz5lksNIw6K69LtIYNG7qh7cp0RWdlFBgpaFy5cqV16tTJcgujlgAAeZ4OvDrIa6SSin1VlKvamJ49e9q6devcMnfccYfripk0aZL9/PPPdttttx1yAjqNAlJdyI033uge469TdTOiEVXKiKgbbNOmTS6joa6tu+66y3r37u0CBnXVfPPNN/b888+H5sa55ZZb3LByZVeWLFlib7zxhitCzg233367bdu2za666ipXZKx2/Pe//3XtkEcffdQVK6u4WTVCqt1RrdHAgQNzrE0EMgCAPE8TxGl0kCbPU6Gqsh6q9VAtiZ+hURHsdddd54IT1aQo6LjkkksOuV51b1122WUu6NFQZNWOqJZE1HWkA/99993nshkKEkRDoB966CEXEKgdGjmlriYVzoraqBFPCo5OOukkV3SsAuHcoGHnGq2koEsZI3XHqSvJz878+9//dgXTCl6UkdIyCrL8tueEfF5GVUopQpGjioxUqJVRuhCxGzR9adyP7d32/yvbASQ3HcCVQdABSPOBALm9n8V6/CYjAwAAAotABgAABBaBDAAACCwCGQAAEFgEMgCADKX4eBCkwP5FIAMAOIg/nFbT5QM5xd+/0jvlQayY2RcAcBBNKa8TGW7cuDE0z0r0dPbA4WRiFMRo/9J+djinMCCQAQCkq3Llyu5/P5gBspuCGH8/ixeBDAAgXcrA6PxCOv+Qzq0DZCd1J2XHySQTHsj8+uuv7rTiU6ZMcWkmncxKUxv7pxJX+qlv375uCmSd0+KMM85wUz7Xrl070U0HgDxBB5ucPHsxENhi37/++ssFJorKFMj8+OOP9uyzz9oRRxwRWubpp592J5/SuSR01lGd0bRdu3ZuWmMAAJC3JTQj89RTT1m1atVcBsYXfmIpZWMGDx5sDz74oDsjqbz22mvu5Fo6WZbOvgkAAPKuhGZkJk+e7LqQLr/8ctcH26hRI9eF5NOJpNavX29t2rQJ3aYTSDVt2tTmzp2b7jp3797tTjQVfgEAAKkpoYHMypUrQ/Uu06ZNs1tvvdV69uxpr776qrtfQYwoAxNO1/37oum05wp2/IsyPgAAIDUlNJA5cOCANW7c2J588kmXjenWrZvddNNNrh4mXmlpae6U3/5l7dq12dpmAACQPBIayGhYX/369SNuq1evnq1Zs8b97Y8t37BhQ8Qyup7RuPMiRYpY6dKlIy4AACA1JTSQ0YilJUuWRNy2dOlSq1GjRqjwVwHLzJkzQ/er5kWjl5o3b57r7QUAAMkloaOWevfubaeffrrrWrriiivsq6++spEjR7qLPxlTr169rF+/fq6ORoHNQw89ZFWrVrUOHToksukAACCvBzKnnnqqTZw40dW1PPbYYy5Q0XDrTp06hZa55557bOfOna5+RhPitWjRwqZOnWpFixZNZNMBAEASyOel+Dna1RWl0Usq/KVe5vANmr407sf2blsnW9sCAEhdsR6/E1ojAwAAcDgIZAAAQGARyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWgQwAAAgsAhkAABBYBDIAACCwCGQAAEBgEcgAAIDAIpABAACBRSADAAACi0AGAAAEFoEMAAAILAIZAAAQWAQyAAAgsAhkAABAYBHIAACAwCKQAQAAgUUgAwAAAotABgAABBaBDAAACCwCGQAAEFgEMgAAILAIZAAAQGARyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWgQwAAAgsAhkAABBYBDIAACCwCGQAAEBgEcgAAIDAIpABAACBRSADAAACi0AGAAAEFoEMAAAILAIZAAAQWAUT3QDkvkHTlya6CQAABD8j88gjj1i+fPkiLnXr1g3dv2vXLuvevbuVL1/eSpYsaR07drQNGzYksskAACCJJLxr6YQTTrDff/89dJkzZ07ovt69e9v7779vEyZMsNmzZ9tvv/1ml156aULbCwAAkkfCu5YKFixolStXPuj2rVu32iuvvGJvvPGGtW7d2t02evRoq1evns2bN8+aNWuWgNYCAIBkkvCMzLJly6xq1apWs2ZN69Spk61Zs8bdvmDBAtu7d6+1adMmtKy6napXr25z587NcH27d++2bdu2RVwAAEBqSmgg07RpUxszZoxNnTrVhg8fbqtWrbIzzzzTtm/fbuvXr7fChQtb2bJlIx5TqVIld19G+vfvb2XKlAldqlWrlgtbAgAA8lzXUvv27UN/N2zY0AU2NWrUsPHjx1uxYsXiWmdaWpr16dMndF0ZGYIZAABSU8K7lsIp+1KnTh1bvny5q5vZs2ePbdmyJWIZjVpKr6bGV6RIEStdunTEBQAApKakCmR27NhhK1assCpVqliTJk2sUKFCNnPmzND9S5YscTU0zZs3T2g7AQBAckho19Jdd91lF110ketO0tDqvn37WoECBezqq6929S1du3Z13UTlypVzmZUePXq4IIYRSwAAIOGBzLp161zQsnnzZqtYsaK1aNHCDa3W3zJo0CDLnz+/mwhPo5HatWtnw4YN450DAABOPs/zPEthKvZVdkfz0lAvk9hTFPRuWychzwsASN3jd1LVyAAAAGQFgQwAAAgsAhkAABBYBDIAACCwCGQAAEBgEcgAAIDAIpABAACBRSADAAACi0AGAAAEFoEMAAAILAIZAAAQWAQyAAAgsAhkAABAYBHIAACAwCKQAQAAgUUgAwAAAotABgAABBaBDAAACCwCGQAAEFgEMgAAILAIZAAAQGARyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWgQwAAAgsAhkAABBYBDIAACCwCGQAAEBgEcgAAIDAIpABAACBRSADAAACi0AGAAAEFoEMAADIW4HMypUrs78lAAAAuRHI1KpVy1q1amVjx461Xbt2xbMKAACAxAQy33zzjTVs2ND69OljlStXtptvvtm++uqrw28NAABATgcyJ598sj333HP222+/2ahRo+z333+3Fi1aWIMGDWzgwIG2adOmeFYLAACQe8W+BQsWtEsvvdQmTJhgTz31lC1fvtzuuusuq1atml1//fUuwAEAAEjKQGb+/Pl22223WZUqVVwmRkHMihUrbPr06S5bc/HFF2dfSwEAALIjkFHQcuKJJ9rpp5/uApbXXnvNVq9ebf369bNjjz3WzjzzTBszZoyrpYnVgAEDLF++fNarV6/QbSok7t69u5UvX95KlixpHTt2tA0bNsTTZAAAkILiCmSGDx9u11xzjQteJk2aZBdeeKHlzx+5qiOPPNJeeeWVmNb39ddf24svvugKiMP17t3b3n//fdd1NXv2bBc0qSsLAABACsbzMixbtizTZQoXLmydO3fOdLkdO3ZYp06d7KWXXnIZHd/WrVtdIPTGG29Y69at3W2jR4+2evXq2bx586xZs2a8gwAA5HFxZWQUUChLEk23vfrqq1lal7qOLrjgAmvTpk3E7QsWLLC9e/dG3F63bl2rXr26zZ07N55mAwCAFBNXINO/f3+rUKHCQberO+nJJ5+MeT3jxo1zdTRaX7T169e7rE7ZsmUjbq9UqZK7LyO7d++2bdu2RVwAAEBqiiuQWbNmjSvqjVajRg13XyzWrl1rd9xxh73++utWtGhRyy4KisqUKRO6aCg4AABITXEFMsq8LFq06KDbFy5c6EYYxUJdRxs3brTGjRu7+Wh0UUHvkCFD3N/KvOzZs8e2bNkS8TiNWtJswhlJS0tz9TX+RQETAABITXEV+1599dXWs2dPK1WqlLVs2dLdpiBEGZarrroqpnWcc845tnjx4ojbbrjhBlcHc++997pMSqFChWzmzJlu2LUsWbLEZXyaN2+e4XqLFCniLgAAIPXFFcg8/vjj9ssvv7hgRNkTOXDggJvNN9YaGQVBOqVBuBIlSriMjn97165d3fmcypUrZ6VLl7YePXq4IIYRSwAAIO5ARkW4b731lgto1J1UrFgxN0GeamSy06BBg9z8NMrIqIi3Xbt2NmzYMN45AADg5PM8z7MUplFLKvpVvYyyOjAbNH1pQp63d9s6CXleAEDqHr/jysjs37/fnYJA9Ssq2FW3UriPP/44ntUCAABkSVyBjIp6FchoIjvVs+gcSQAAAIEIZDSR3fjx4+3888/P/hYBAADk5DwyKvatVatWPA8FAABIbCBz55132nPPPWcpXicMAABSsWtpzpw5NmvWLJsyZYqdcMIJbuK6cO+++252tQ8AACB7AxmdyPGSSy6J56EAAACJDWRGjx6dfS0AAADIzRoZ2bdvn82YMcNefPFF2759u7vtt99+sx07dsS7SgAAgJzPyKxevdrOO+88dwJHnTqgbdu27txJTz31lLs+YsSIeFYLAACQ8xkZTYh3yimn2F9//eXOs+RT3Yxm+wUAAEjajMxnn31mX3zxhZtPJtwxxxxjv/76a3a1DQAAIPszMjq3ks63FG3dunWuiwkAACBpA5lzzz3XBg8eHLqucy2pyLdv376ctgAAACR319Kzzz5r7dq1s/r169uuXbvsmmuusWXLllmFChXszTffzP5WAgAAZFcgc/TRR9vChQvdySMXLVrksjFdu3a1Tp06RRT/AgAAJF0g4x5YsKBde+212dsaAACAnA5kXnvttUPef/3118ezWgAAgJwPZDSPTLi9e/fa33//7YZjFy9enEAGAAAk76glTYQXflGNzJIlS6xFixYU+wIAgOQ/11K02rVr24ABAw7K1gAAACR9IOMXAOvEkQAAAElbIzN58uSI657n2e+//24vvPCCnXHGGdnVNgAAgOwPZDp06BBxXTP7VqxY0Vq3bu0mywMAAEjaQEbnWgIAAAjshHhILc3WjMx0mXnVu+VKWwAAyNFApk+fPjEvO3DgwHieAgAAIGcCmW+//dZdNBHe8ccf725bunSpFShQwBo3bhxROwMAAJBUgcxFF11kpUqVsldffdWOOOIId5smxrvhhhvszDPPtDvvvDO72wkAAJA988hoZFL//v1DQYzo7379+jFqCQAAJHdGZtu2bbZp06aDbtdt27dvz452AREGTV8a92N7t62TrW0BAAQ8I3PJJZe4bqR3333X1q1b5y7vvPOOde3a1S699NLsbyUAAEB2ZWRGjBhhd911l11zzTWu4NetqGBBF8g888wz8awSAAAgdwKZ4sWL27Bhw1zQsmLFCnfbcccdZyVKlIhndQAAALl/0kidX0kXnflaQYzOuQQAAJDUgczmzZvtnHPOsTp16tj555/vghlR1xJDrwEAQFIHMr1797ZChQrZmjVrXDeT78orr7SpU6dmZ/sAAACyt0bmf//7n02bNs2OPvroiNvVxbR69ep4VgkAAJA7GZmdO3dGZGJ8f/75pxUpUiSeVQIAAOROIKPTELz22msR51Q6cOCAPf3009aqVat4VgkAAJA7XUsKWFTsO3/+fNuzZ4/dc8899sMPP7iMzOeffx7PKgEAAHInI9OgQQN3tusWLVrYxRdf7LqaNKOvzoit+WRiNXz4cGvYsKGVLl3aXZo3b25TpkwJ3b9r1y7r3r27lS9f3kqWLGkdO3a0DRs2xNNkAACQgrKckdFMvuedd56b3feBBx44rCdXsfCAAQNckbDmoNHZtBUYKSA64YQT3OioDz/80CZMmGBlypSx22+/3QVMZH0AAEBcgYyGXS9atChbXr2LLroo4voTTzzhsjTz5s1zQc4rr7xib7zxhrVu3drdP3r0aKtXr567v1mzZryDAADkcXF1LV177bUuyMhO+/fvt3HjxrluKnUxLViwwGV/2rRpE1qmbt26Vr16dZs7d26G69m9e7c7O3f4BQAApKa4in337dtno0aNshkzZliTJk0OOsfSwIEDY17X4sWLXeCiehjVwUycONHq169v3333nRUuXNjKli0bsXylSpVs/fr1Ga6vf//+9uijj8axVchMszUjD3n/vOrdLCnbOqv8wQu0SsvV9gAAkiCQWblypR1zzDH2/fffW+PGjd1tKvoNp6HYWXH88ce7oGXr1q329ttvW+fOnW327NkWr7S0NOvTp0/oujIy1apVi3t9AAAgRQIZFeXqvEqzZs0KnZJgyJAhLksSL2VdatWq5f5Wdufrr7+25557zq1bQ7u3bNkSkZXRqKXKlStnuD5NyMekfAAA5A1ZqpGJPru1hkqrpiU7aWI91bkoqFFh8cyZM0P3LVmyxJ3fSV1RAAAAcdXIZBTYxNMN1L59e1fAu337djdC6ZNPPnHncdJwa51NW91E5cqVc/PM9OjRwwUxjFgCAABZDmRU/xJdA5PVmphwGzdutOuvv951Vylw0eR4CmLatm3r7h80aJDlz5/fTYSnLE27du1s2LBhvHMAACDrgYwyMF26dAnVoGik0S233HLQqKV33303pvVlNoS7aNGiNnToUHdB8A2aHlkYnlOjpwAAeUeWAhmNKIqeTwYAACAQgYxm1gUAAAj0zL4AAADJgEAGAAAEFoEMAAAILAIZAAAQWAQyAAAgsAhkAABAYBHIAACAwCKQAQAAgUUgAwAAAotABgAABBaBDAAACCwCGQAAEFgEMgAAILAIZAAAQGARyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWgQwAAAgsAhkAABBYBDIAACCwCGQAAEBgEcgAAIDAIpABAACBRSADAAACi0AGAAAEFoEMAAAILAIZAAAQWAQyAAAgsAhkAABAYBHIAACAwCKQAQAAgUUgAwAAAqtgohuAXDKrf+jPZms258hTNFszMtNl5lXvliPPDQDIm8jIAACAwCKQAQAAgUUgAwAAAotABgAABBbFvshVsRQEAwAQiIxM//797dRTT7VSpUrZkUceaR06dLAlS5ZELLNr1y7r3r27lS9f3kqWLGkdO3a0DRs2JKzNAAAgeSQ0kJk9e7YLUubNm2fTp0+3vXv32rnnnms7d+4MLdO7d297//33bcKECW753377zS699NJENhsAACSJhHYtTZ06NeL6mDFjXGZmwYIF1rJlS9u6dau98sor9sYbb1jr1q3dMqNHj7Z69eq54KdZs2YJajkAAEgGSVXsq8BFypUr5/5XQKMsTZs2bULL1K1b16pXr25z585Ndx27d++2bdu2RVwAAEBqSppi3wMHDlivXr3sjDPOsAYNGrjb1q9fb4ULF7ayZctGLFupUiV3X0Z1N48++miutBmpMdNxhlql5UZLAACpkJFRrcz3339v48aNO6z1pKWlucyOf1m7dm22tREAACSXpMjI3H777fbBBx/Yp59+akcffXTo9sqVK9uePXtsy5YtEVkZjVrSfekpUqSIuwAAgNSX0IyM53kuiJk4caJ9/PHHduyxx0bc36RJEytUqJDNnDkzdJuGZ69Zs8aaN2+egBYDAIBkUjDR3UkakfTee++5uWT8upcyZcpYsWLF3P9du3a1Pn36uALg0qVLW48ePVwQw4glAACQ0EBm+PDh7v+zzz474nYNse7SpYv7e9CgQZY/f343EZ5GJLVr186GDRtmed2g6UuztHyzNZtzrC0AAOTJQEZdS5kpWrSoDR061F0AAACSctQSAABAVhHIAACAwCKQAQAAgUUgAwAAAotABgAABBaBDAAACCwCGQAAEFgEMgAAILAIZAAAQGAlxdmvgZw0d2V8p2eYt2+p9W5bJ9vbAwDIPmRkAABAYBHIAACAwCKQAQAAgUUgAwAAAotABgAABBaBDAAACCwCGQAAEFgEMgAAILAIZAAAQGAxs28KaLZmZKKbAABAQpCRAQAAgUUgAwAAAotABgAABBaBDAAACCyKfYEcMmj60rgf27ttnWxtCwCkKjIyAAAgsAhkAABAYBHIAACAwCKQAQAAgUWxL5BDBbsAgJxHRgYAAAQWgQwAAAgsAhkAABBYBDIAACCwCGQAAEBgMWoJiFOzNSMzXWZe9W650hYAyKvIyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWxb4JwtT3qVHMCwDIwxmZTz/91C666CKrWrWq5cuXzyZNmhRxv+d59vDDD1uVKlWsWLFi1qZNG1u2bFnC2gsAAJJLQgOZnTt32kknnWRDhw5N9/6nn37ahgwZYiNGjLAvv/zSSpQoYe3atbNdu3blelsBAEDySWjXUvv27d0lPcrGDB482B588EG7+OKL3W2vvfaaVapUyWVurrrqqlxuLQAASDZJW+y7atUqW79+vetO8pUpU8aaNm1qc+fOzfBxu3fvtm3btkVcAABAakraYl8FMaIMTDhd9+9LT//+/e3RRx/N8fYByVoM3rttnWxtCwAks6TNyMQrLS3Ntm7dGrqsXbs20U0CAAB5LZCpXLmy+3/Dhg0Rt+u6f196ihQpYqVLl464AACA1JS0gcyxxx7rApaZM2eGblO9i0YvNW/ePKFtAwAAySGhNTI7duyw5cuXRxT4fvfdd1auXDmrXr269erVy/r162e1a9d2gc1DDz3k5pzp0KFDIpsNAACSREIDmfnz51urVq1C1/v06eP+79y5s40ZM8buueceN9dMt27dbMuWLdaiRQubOnWqFS1aNIGtBpIbhcIA8pKEBjJnn322my8mI5rt97HHHnMXAACAwNTIAAAAZIZABgAABBaBDAAACCwCGQAAEFgEMgAAILAIZAAAQGARyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWgQwAAAgsAhkAABBYBDIAACCwCGQAAEBgFUx0AwAcnmZrRma6zLzq3XKlLQCQ28jIAACAwCKQAQAAgUUgAwAAAotABgAABBbFvkACUagLAIeHjAwAAAgsAhkAABBYBDIAACCwCGQAAEBgUewLJLiYNzfWkRsGTV8a92N7t62TrW0BkHeQkQEAAIFFIAMAAAKLQAYAAAQWgQwAAAgsin0TVNwIJCP2aQBBQ0YGAAAEFoEMAAAILAIZAAAQWAQyAAAgsCj2BYA4MJMxkBzIyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWgQwAAAisQIxaGjp0qD3zzDO2fv16O+mkk+z555+30047zfKKZmtGJroJSHGx7GPzqnfLlvWkZ+4rsS8bSzsCY1b/zJdplWbJIIijtILY5kQZFODXKukzMm+99Zb16dPH+vbta998840LZNq1a2cbN25MdNMAAECCJX0gM3DgQLvpppvshhtusPr169uIESOsePHiNmrUqEQ3DQAAJFhSBzJ79uyxBQsWWJs2bUK35c+f312fO3duQtsGAAASL6lrZP744w/bv3+/VapUKeJ2Xf/555/Tfczu3bvdxbd161b3/7Zt27K9fbt27rDcsPOf/98eICf21Vj2sVj299zYV3Prc5eTQt9HO3fFsrAlg8N53XPi+zdV25wou5LwtfLX63lecAOZePTv398effTRg26vVq1aQtoDJIcXkmQdlkLtiN/9WVr6Mctb25scgtjmVH2ttm/fbmXKlAlmIFOhQgUrUKCAbdiwIeJ2Xa9cuXK6j0lLS3PFwb4tW7ZYjRo1bM2aNYd8IVKRolkFcGvXrrXSpUtbXpJXtz2vbrew7Xlv2/PqdueVbfc8zwUxVatWPeRySR3IFC5c2Jo0aWIzZ860Dh06uNsOHDjgrt9+++3pPqZIkSLuEk1BTKq+2ZnRdrPteUte3W5h2/PetufV7c4L214mhgREUgcyouxK586d7ZRTTnFzxwwePNh27tzpRjEBAIC8LekDmSuvvNI2bdpkDz/8sJsQ7+STT7apU6ceVAAMAADynqQPZETdSBl1JWVG3UyaTC+97qZUx7bnvW3Pq9stbHve2/a8ut15fduj5fMyG9cEAACQpJJ6QjwAAIBDIZABAACBRSADAAACi0AGAAAEVsoHMkOHDrVjjjnGihYtak2bNrWvvvrKksWnn35qF110kZu1MF++fDZp0qSI+1WHrWHnVapUsWLFirmTZS5btiximT///NM6derkJkQqW7asde3a1XbsiDxnxqJFi+zMM890r4Fmgnz66acPasuECROsbt26bpkTTzzRPvrooyy3JSunkTj11FOtVKlSduSRR7rJDpcsWRKxzK5du6x79+5Wvnx5K1mypHXs2PGgGZ41W/MFF1zgzoau9dx99922b9++iGU++eQTa9y4savsr1Wrlo0ZMybL+0gsbYnV8OHDrWHDhqFJrJo3b25TpkxJ+e2ONmDAALfP9+rVK+W3/ZFHHnHbGn7RZy3Vt9v366+/2rXXXuvWqe8Ofb/Mnz8/5b/n9DpHv++66PXNC+97rvJS2Lhx47zChQt7o0aN8n744Qfvpptu8sqWLett2LDBSwYfffSR98ADD3jvvvuuRo55EydOjLh/wIABXpkyZbxJkyZ5Cxcu9P71r395xx57rPfPP/+EljnvvPO8k046yZs3b5732WefebVq1fKuvvrq0P1bt271KlWq5HXq1Mn7/vvvvTfffNMrVqyY9+KLL4aW+fzzz70CBQp4Tz/9tPfjjz96Dz74oFeoUCFv8eLFWWpLrNq1a+eNHj3atee7777zzj//fK969erejh07QsvccsstXrVq1byZM2d68+fP95o1a+adfvrpofv37dvnNWjQwGvTpo337bffuteyQoUKXlpaWmiZlStXesWLF/f69Onjtuv555932zl16tQs7SOZtSUrJk+e7H344Yfe0qVLvSVLlnj333+/e631WqTydof76quvvGOOOcZr2LChd8cdd8T8fEHd9r59+3onnHCC9/vvv4cumzZtSvntlj///NOrUaOG16VLF+/LL7907Zw2bZq3fPnylP+e27hxY8R7Pn36dPc9P2vWrJR/33NbSgcyp512mte9e/fQ9f3793tVq1b1+vfv7yWb6EDmwIEDXuXKlb1nnnkmdNuWLVu8IkWKuA+paMfV477++uvQMlOmTPHy5cvn/frrr+76sGHDvCOOOMLbvXt3aJl7773XO/7440PXr7jiCu+CCy6IaE/Tpk29m2++Oea2HA594LUds2fPDq1bXzATJkwILfPTTz+5ZebOneuu60OdP39+b/369aFlhg8f7pUuXTq0rffcc487gIS78sorXSAV6z4SS1sOl96fl19+OU9s9/bt273atWu7L/WzzjorFMik8rYrkNFBOD2pvN3+d02LFi0yvD8vfc9pXz/uuOPc86T6+57bUrZrac+ePbZgwQKXGvTlz5/fXZ87d64lu1WrVrmZjMPbr3NOKC3ot1//K82q0zf4tLy288svvwwt07JlS3feKl+7du1cV85ff/0VWib8efxl/OeJpS2HY+vWre7/cuXKuf/1vu3duzfi+ZQOrl69esS2KzUcPsOz2qwTqf3www8xbVcs+0gsbYnX/v37bdy4ce6UG+piygvbrfS1UuXR7Uv1bVf3hLqQa9as6bpI1GWQF7Z78uTJ7vvp8ssvd10jjRo1spdeeinPfc/p9R87dqzdeOONrnsp1d/33Jaygcwff/zhDhTRpzLQde2syc5v46Har//15RCuYMGCLiAIXya9dYQ/R0bLhN+fWVvipZOAqk7ijDPOsAYNGoSeT19I+vI6VJvi3S59Efzzzz8x7SOxtCWrFi9e7Pqh1ad9yy232MSJE61+/fopv90K2r755htXIxUtlbddB0LVLejUKqqR0gFTtRw6q28qb7esXLnSbXPt2rVt2rRpduutt1rPnj3t1VdfzVPfc6p/3LJli3Xp0iX0XKn8vue2QJyiAKlLv9C///57mzNnjuUVxx9/vH333XcuE/X222+7k6LOnj3bUtnatWvtjjvusOnTp7uCw7ykffv2ob9V6K3ApkaNGjZ+/HhXUJrK9ENFmZQnn3zSXVdGRp/3ESNGuP0+r3jllVfcfqCsHLJfymZkKlSoYAUKFDio8lrXK1eubMnOb+Oh2q//N27cGHG/KtpV4R++THrrCH+OjJYJvz+ztsRD58/64IMPbNasWXb00UdHbLtSovoFc6g2xbtdGvmgA0gs+0gsbckq/frR6IImTZq47MRJJ51kzz33XEpvt9LX2lc1ukK/pnVR8DZkyBD3t379peq2R9Mv3zp16tjy5ctT+j0Xjf5RtjFcvXr1Ql1reeF7bvXq1TZjxgz797//Hbot1d/33JaygYwOFjpQzJw5M+LXga6rHiHZHXvssW4nCm+/0oXqE/bbr/+18+kg4fv444/ddupXn7+MhnmrD9SnX8XKChxxxBGhZcKfx1/Gf55Y2pIVqm1WEKMuFbVX6w+n961QoUIRz6e+bn35hW+7umjCv+DUZn2A/S/OzLYrln0klrYcLj3n7t27U3q7zznnHNduZaL8i36pq17E/ztVtz2ahg2vWLHCHeRT+T0XdRlHT62wdOlSl5FK9e853+jRo13XmGrDfKn+vuc6L4Vp2JkqzseMGeMq37t16+aGnYVXgSeSRnBoWJ0ueisGDhzo/l69enVoKKDa+95773mLFi3yLr744nSHJTZq1MgNbZwzZ44bERI+LFEV6RqWeN1117lhiXpNNFwvelhiwYIFvf/85z+uWl2jLNIblphZW2J16623uiGOn3zyScTwxL///jtiOKCGZH/88cduOGDz5s3dJXpo4rnnnuuGcGu4YcWKFdMdmnj33Xe77Ro6dGi6QxMz20cya0tW3HfffW501qpVq9zrqOsaffG///0vpbc7PeGjllJ52++88063r+s912dNw2k1jFaj9VJ5u/2h9vpueeKJJ7xly5Z5r7/+umvn2LFjQ8uk6vecP0JIr6dGUEVL5fc9t6V0ICMaV683SOPoNQxN8xAkC80noAAm+tK5c2d3v4bpPfTQQ+4Dqh3xnHPOcXOPhNu8ebP7QJcsWdINy7vhhhtcgBRO8yFoCKTWcdRRR7kPa7Tx48d7derUca+ThvNprpNwsbQlVultsy6aW8anL47bbrvNDanUB/WSSy5xwU64X375xWvfvr2bL0IHBh0w9u7de9BrfPLJJ7vtqlmzZsRzxLqPxNKWWN14441uXg09l76U9Dr6QUwqb3csgUyqbruGw1apUsU9lz5/uh4+j0qqbrfv/fffdwdkfW/UrVvXGzlyZMT9qfo9J5ozR99t6a0j1d/33JRP/+R+HggAAODwpWyNDAAASH0EMgAAILAIZAAAQGARyAAAgMAikAEAAIFFIAMAAAKLQAYAAAQWgQyAwDnmmGNs8ODBiW4GgCRAIAMgobp06WL58uVzF/+Emo899pg7MWBGvv76a+vWrVuuthNAciqY6AYAwHnnnedOrqeTZ3700UfWvXt3dyK7tLS0iOV0ll4FOxUrVkxYWwEkFzIyABKuSJEi7szDOivyrbfeam3atLHJkye7bE2HDh3siSeesKpVq7qzGafXtaSzI998881WqVIlK1q0qDVo0MA++OCD0P1z5syxM88804oVK2bVqlWznj172s6dOxOyrQCyFxkZAElHAcfmzZvd3zNnzrTSpUvb9OnT0132wIED1r59e9u+fbuNHTvWjjvuOPvxxx+tQIEC7v4VK1a4jE+/fv1s1KhRtmnTJrv99tvdRVkgAMFGIAMgaegctgpcpk2bZj169HBBR4kSJezll192XUrpmTFjhn311Vf2008/WZ06ddxtNWvWDN3fv39/69Spk/Xq1ctdr127tg0ZMsTOOussGz58uMvgAAguupYAJJy6gUqWLOmCCmVXrrzySnvkkUfcfSeeeGKGQYx89913dvTRR4eCmGgLFy60MWPGuPX7l3bt2rlMzqpVq3JsmwDkDjIyABKuVatWLjuigEW1MAUL/v9XkzIymXVDHcqOHTtc/YzqYqJVr179MFoNIBkQyABIOAUrGnYdj4YNG9q6dets6dKl6WZlGjdu7Gpm4l0/gORG1xKAQFOtS8uWLa1jx46uIFjdRVOmTLGpU6e6+++991774osvXHGvuqGWLVtm7733nrsOIPgIZAAE3jvvvGOnnnqqXX311Va/fn275557bP/+/aGMzezZs13GRkOwGzVqZA8//LDrwgIQfPk8DRMAAAAIIDIyAAAgsAhkAABAYBHIAACAwCKQAQAAgUUgAwAAAotABgAABBaBDAAACCwCGQAAEFgEMgAAILAIZAAAQGARyAAAgMAikAEAABZU/wd0exWlYbMSvgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(y_test, bins=30, alpha=0.5, label='Actual Price')\n",
    "plt.hist(y_pred, bins=30, alpha=0.5, label='Predicted Price')\n",
    "plt.xlabel(\"Price\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.title(\"Distribution of Actual vs Predicted Prices\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42383a65",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
